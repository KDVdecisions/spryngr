axis.title=element_text(size=14),
plot.margin = margin(l=1, r=2, unit="cm"),
axis.title.x = element_text(hjust = 0.56),
axis.title.y = element_text(vjust = 1),
legend.position = "none")
ggsave("Plots/S3.png", S3, width=11, height=7)
dyads
rawData
rawData[[1]]
rawData[,1]
rawData <- as.data.frame(read_xlsx(path = "Data/DRI covid NV Slider data.xlsx", sheet = 2))
dyads <- rawData[[2]]
factors <- rawData[[4]]
factors <- factor(factors, levels = c("Not likely", "Somewhat likely", "Likely"))
df <- data.frame(continuous = dyads, discrete = factors)
preNA <- NROW(df)
df <- na.omit(df)
postNA <- nrow(df)
nDropped <- preNA - postNA
nrow(df)
labels <- str_wrap(levels(factors), width = 10)
S1 <- ggplot(df, mapping = aes(x = continuous, y = discrete, fill = discrete)) +
geom_violin() +
stat_summary(fun="mean", geom="point", shape=8, size=4, color="black") +
scale_y_discrete(labels = labels) +
labs(x = "orders and recommendations <————————>  inclination and desires",
y = "Vaccine Likelyhood\n",
title = "During the experience, people followed…") +
scale_fill_manual(values = c("royalblue3", "limegreen", "firebrick3")) +
theme(plot.title=element_text(size=18), axis.text=element_text(size=14),
axis.title=element_text(size=14),
plot.margin = margin(l=1, r=2, unit="cm"),
axis.title.x = element_text(hjust = 0.4),
axis.title.y = element_text(vjust = 1),
legend.position = "none")
S1
S1 <- ggplot(df, mapping = aes(x = continuous, y = discrete, fill = discrete)) +
geom_violin() +
stat_summary(fun="mean", geom="point", shape=8, size=4, color="black") +
scale_y_discrete(labels = labels) +
labs(x = "orders and recommendations <————————>  inclination and desires",
y = "Vaccine Likelyhood\n",
title = "During the experience, people followed…") +
scale_fill_manual(values = c("royalblue3", "limegreen", "firebrick3")) +
theme(plot.title=element_text(size=18), axis.text=element_text(size=14),
axis.title=element_text(size=14),
plot.margin = margin(l=1, r=2, unit="cm"),
axis.title.x = element_text(hjust = 0.4),
axis.title.y = element_text(vjust = 1),
legend.position = "none")
rawData <- as.data.frame(read_xlsx(path = "Data/DRI covid NV Slider data.xlsx", sheet = 3))
dyads <- rawData[[2]]
factors <- rawData[[4]]
dyads
levels(as.factor(factors))
factors <- factor(factors, levels = c("positive", "mixed", "negative"))
df <- data.frame(continuous = dyads, discrete = factors)
preNA <- NROW(df)
df <- na.omit(df)
postNA <- nrow(df)
nDropped <- preNA - postNA
nDropped
NROW(df)
labels <- str_wrap(levels(factors), width = 10)
S2 <- ggplot(df, mapping = aes(x = continuous, y = discrete, fill = discrete)) +
geom_violin() +
stat_summary(fun="mean", geom="point", shape=8, size=4, color="black") +
scale_y_discrete(labels = labels) +
labs(x = "rational thought <————————>  emotional feelings",
y = "Overall Impression\n",
title = "People’s initial reaction during the experience was probabaly prompted by…") +
scale_fill_manual(values = c("royalblue3", "limegreen", "firebrick3")) +
theme(plot.title=element_text(size=18), axis.text=element_text(size=14),
axis.title=element_text(size=14),
plot.margin = margin(l=1, r=2, unit="cm"),
axis.title.x = element_text(hjust = 0.52),
axis.title.y = element_text(vjust = 1),
legend.position = "none")
S2
rawData <- as.data.frame(read_xlsx(path = "Data/DRI covid NV Slider data.xlsx", sheet = 4))
dyads <- rawData[[2]]
factors <- rawData[[4]]
dyads
levels(as.factor(factors))
factors <- factor(factors, levels = c("NV Unknown", "Las Vegas", "Other NV"))
df <- data.frame(continuous = dyads, discrete = factors)
preNA <- NROW(df)
df <- na.omit(df)
postNA <- nrow(df)
nDropped <- preNA - postNA
nDropped
NROW(df)
labels <- str_wrap(levels(factors), width = 10)
S3 <- ggplot(df, mapping = aes(x = continuous, y = discrete, fill = discrete)) +
geom_violin() +
stat_summary(fun="mean", geom="point", shape=8, size=4, color="black") +
scale_y_discrete(labels = labels) +
labs(x = "protection <————————>  creative options",
y = "Location\n",
title = "In the experience shared, the effects of limits promoted…") +
scale_fill_manual(values = c("limegreen", "firebrick3", "royalblue3")) +
theme(plot.title=element_text(size=18), axis.text=element_text(size=14),
axis.title=element_text(size=14),
plot.margin = margin(l=1, r=2, unit="cm"),
axis.title.x = element_text(hjust = 0.56),
axis.title.y = element_text(vjust = 1),
legend.position = "none")
S3
rawData <- as.data.frame(read_xlsx(path = "Data/DRI covid NV Slider data.xlsx", sheet = 3))
dyads <- rawData[[2]]
factors <- rawData[[4]]
dyads
levels(as.factor(factors))
factors <- factor(factors, levels = c("positive", "mixed", "negative"))
df <- data.frame(continuous = dyads, discrete = factors)
preNA <- NROW(df)
df <- na.omit(df)
postNA <- nrow(df)
nDropped <- preNA - postNA
nDropped
NROW(df)
labels <- str_wrap(levels(factors), width = 10)
S2 <- ggplot(df, mapping = aes(x = continuous, y = discrete, fill = discrete)) +
geom_violin() +
stat_summary(fun="mean", geom="point", shape=8, size=4, color="black") +
scale_y_discrete(labels = labels) +
labs(x = "rational thought <————————>  emotional feelings",
y = "Overall Impression\n",
title = "People’s initial reaction during the experience was probabaly prompted by…") +
scale_fill_manual(values = c("royalblue3", "limegreen", "firebrick3")) +
theme(plot.title=element_text(size=18), axis.text=element_text(size=14),
axis.title=element_text(size=14),
plot.margin = margin(l=1, r=2, unit="cm"),
axis.title.x = element_text(hjust = 0.52),
axis.title.y = element_text(vjust = 1),
legend.position = "none")
S2
levels(factors)
labels <- str_wrap(c("Positive", "Mixed", "Negative"), width = 10)
S2 <- ggplot(df, mapping = aes(x = continuous, y = discrete, fill = discrete)) +
geom_violin() +
stat_summary(fun="mean", geom="point", shape=8, size=4, color="black") +
scale_y_discrete(labels = labels) +
labs(x = "rational thought <————————>  emotional feelings",
y = "Overall Impression\n",
title = "People’s initial reaction during the experience was probabaly prompted by…") +
scale_fill_manual(values = c("royalblue3", "limegreen", "firebrick3")) +
theme(plot.title=element_text(size=18), axis.text=element_text(size=14),
axis.title=element_text(size=14),
plot.margin = margin(l=1, r=2, unit="cm"),
axis.title.x = element_text(hjust = 0.52),
axis.title.y = element_text(vjust = 1),
legend.position = "none")
S2
rawData <- as.data.frame(read_xlsx(path = "Data/DRI covid NV Slider data.xlsx", sheet = 3))
dyads <- rawData[[2]]
factors <- rawData[[4]]
dyads
levels(as.factor(factors))
factors <- factor(factors, levels = c("positive", "mixed", "negative"))
df <- data.frame(continuous = dyads, discrete = factors)
preNA <- NROW(df)
df <- na.omit(df)
postNA <- nrow(df)
nDropped <- preNA - postNA
nDropped
NROW(df)
labels <- str_wrap(c("Positive", "Mixed", "Negative"), width = 10)
S2 <- ggplot(df, mapping = aes(x = continuous, y = discrete, fill = discrete)) +
geom_violin() +
stat_summary(fun="mean", geom="point", shape=8, size=4, color="black") +
scale_y_discrete(labels = labels) +
labs(x = "rational thought <————————>  emotional feelings",
y = "Overall Impression\n",
title = "People’s initial reaction during the experience was probabaly prompted by…") +
scale_fill_manual(values = c("royalblue3", "limegreen", "firebrick3")) +
theme(plot.title=element_text(size=18), axis.text=element_text(size=14),
axis.title=element_text(size=14),
plot.margin = margin(l=1, r=2, unit="cm"),
axis.title.x = element_text(hjust = 0.52),
axis.title.y = element_text(vjust = 1),
legend.position = "none")
ggsave("Plots/S2.png", S2, width=11, height=7)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/parseQuestions.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/getUserInput.R', echo=TRUE)
library(dplyr)
library(stringr)
library(ggplot2)
library(xlsx)
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/scratch")
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
continuous <- res[[1]]
discrete <- res[[2]]
continuous
discrete
hey <- list(c(1,2), c(3,4))
append(hey, c(5,6))
?append
append(hey, list(c(5,6)))
hey[[1]]
hey[[2]]
hey[[3]]
hey <- append(hey, list(c(5,6)))
hey]]3
hey[[3]]
#' Classifies questions as either discrete or continuous
#'
#' @param qData: Survey data
#' @param qTitles: Survey data headers
#' @param qInds: Question column beginning and ending indexes
#'
classifyQuestions <- function(qData, qTitles, qInds){
continuous <- list()
discrete <- list()
for(qInd in qInds){
firstCol <- qData[qInd[1]]
if(is.numeric(firstCol[,1])){
if(is.integer(firstCol[,1])){
discrete <- append(discrete, list(qInd))
} else{
continuous <- append(continuous, list(qInd))
}
}else if(is.character(firstCol[,1])){
discrete <- append(discrete, list(qInd))
} else{
print("Something unexpected happened on: ")
print(paste0("      ", qInd))
}
}
return(list(continuous, discrete))
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
continuous <- res[[1]]
discrete <- res[[2]]
continuous
discrete
continuous
parseQuestions <- function(inputFile){
if(!getWritePermission()){
cat("Exiting...\n")
}else{
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qData <- rawData[15:(length(rawData)-1)]
qTitles <- names(qData)[1:(length(names(qData))-1)]
qInds <- getQIndices(qTitles, qData)
print(qInds)
return(classifyQuestions(qData, qTitles, qInds))
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
parseQuestions <- function(inputFile){
if(!getWritePermission()){
cat("Exiting...\n")
}else{
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qData <- rawData[15:(length(rawData))]
qTitles <- names(qData)[1:(length(names(qData)))]
qInds <- getQIndices(qTitles, qData)
print(qInds)
return(classifyQuestions(qData, qTitles, qInds))
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
qData <- rawData[15:(length(rawData) - 1)]
qTitles <- names(qData)[1:(length(names(qData)) - 1)]
parseQuestions <- function(inputFile){
if(!getWritePermission()){
cat("Exiting...\n")
}else{
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qData <- rawData[15:(length(rawData) - 1)]
qTitles <- names(qData)[1:(length(names(qData)) - 1)]
qInds <- getQIndices(qTitles, qData)
print(qInds)
return(classifyQuestions(qData, qTitles, qInds))
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
parseQuestions <- function(inputFile){
if(!getWritePermission()){
cat("Exiting...\n")
}else{
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qData <- rawData[15:(length(rawData) - 1)]
qTitles <- names(qData)[1:(length(names(qData)) - 1)]
print(qTitles)
qInds <- getQIndices(qTitles, qData)
print(qInds)
return(classifyQuestions(qData, qTitles, qInds))
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
parseQuestions <- function(inputFile){
if(!getWritePermission()){
cat("Exiting...\n")
}else{
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qData <- rawData[15:(length(rawData))]
qTitles <- names(qData)[1:(length(names(qData)))]
print(qTitles)
qInds <- getQIndices(qTitles, qData)
print(qInds)
return(classifyQuestions(qData, qTitles, qInds))
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
parseQuestions <- function(inputFile){
if(!getWritePermission()){
cat("Exiting...\n")
}else{
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qData <- rawData[15:(length(rawData) - 1)]
qTitles <- names(qData)[1:(length(names(qData)))]
print(qTitles)
qInds <- getQIndices(qTitles, qData)
print(qInds)
return(classifyQuestions(qData, qTitles, qInds))
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
parseQuestions <- function(inputFile){
if(!getWritePermission()){
cat("Exiting...\n")
}else{
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qData <- rawData[15:(length(rawData) - 1)]
qTitles <- names(qData)[1:(length(names(qData)))]
qInds <- getQIndices(qTitles, qData)
return(classifyQuestions(qData, qTitles, qInds))
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
continuous <- res[[1]]
discrete <- res[[2]]
continuous
discrete
firstCol <- qTitles[qInds[[1]]] %>%
str_split(" - ")
isMarble <- function(qInds, qTitles){
if(qInds[[2]] > qInds[[1]]){
firstCol <- qTitles[qInds[[1]]] %>%
str_split(" - ")
}
}
isMarble <- function(qInds, qTitles){
if(qInds[2] > qInds[2]){
firstCol <- qTitles[qInds[1]] %>%
str_split(" - ")
}
}
isMarble <- function(qInds, qTitles){
if(qInds[2] > qInds[2]){
firstCol <- qTitles[qInds[1]] %>%
str_split(" - ")
}
}
hey <- "12\. Thinking about the experience you shared related to your place of work , select the items on th - Career opportunity   - X"
str_split(hey)
str_split(hey, " - ")
hey <- "12\. Thinking about the experience you shared related to your place of work , select the items on th - Career opportunity   - X"
str_split(hey, " - ")
hey <- "12\. Thinking about the experience you shared related to your place of work , select the items on th - Career opportunity   - X"
hey <- "12 Thinking about the experience you shared related to your place of work , select the items on th - Career opportunity   - X"
str_split(hey, " - ")
str_split(hey, " - ") %>%
tail()
str_split(hey, " - ") %>%
tail(n = 1)
str_split(hey, " - ") %>%
tail(n = 1)
str_split(hey, " - ") %>%
unlist() %>%
tail(n = 1)
#' Classifies questions as either discrete or continuous
#'
#' @param qData: Survey data
#' @param qTitles: Survey data headers
#' @param qInds: Question column beginning and ending indexes
#'
classifyQuestions <- function(qData, qTitles, qInds){
continuous <- list()
discrete <- list()
for(qInd in qInds){
firstCol <- qData[qInd[1]]
if(is.numeric(firstCol[,1])){
if(is.integer(firstCol[,1])){
discrete <- append(discrete, list(qInd))
} else{
continuous <- append(continuous, list(qInd))
print(qInd)
print(isMarble(qInd, qTitles))
}
}else if(is.character(firstCol[,1])){
discrete <- append(discrete, list(qInd))
} else{
print("Something unexpected happened on: ")
print(paste0("      ", qInd))
}
}
return(list(continuous, discrete))
}
isMarble <- function(qInds, qTitles){
if(qInds[2] > qInds[2]){
firstCol <- qTitles[qInds[1]] %>%
str_split(" - ") %>%
unlist() %>%
tail(n = 1)
secondCol <- qTitles[qInds[2]] %>%
str_split(" - ") %>%
unlist() %>%
tail(n = 1)
if(firstCol == "X" && secondCol == "Y"){
return(TRUE)
} else{
return(FALSE)
}
} else{
return(FALSE)
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
isMarble <- function(qInds, qTitles){
if(qInds[2] > qInds[2]){
firstCol <- qTitles[qInds[1]] %>%
str_split(" - ") %>%
unlist() %>%
tail(n = 1)
secondCol <- qTitles[qInds[2]] %>%
str_split(" - ") %>%
unlist() %>%
tail(n = 1)
print(firstCol)
print(secondCol)
if(firstCol == "X" && secondCol == "Y"){
return(TRUE)
} else{
return(FALSE)
}
} else{
return(FALSE)
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
isMarble <- function(qInds, qTitles){
if(qInds[2] > qInds[1]){
firstCol <- qTitles[qInds[1]] %>%
str_split(" - ") %>%
unlist() %>%
tail(n = 1)
secondCol <- qTitles[qInds[2]] %>%
str_split(" - ") %>%
unlist() %>%
tail(n = 1)
print(firstCol)
print(secondCol)
if(firstCol == "X" && secondCol == "Y"){
return(TRUE)
} else{
return(FALSE)
}
} else{
return(FALSE)
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
isMarble <- function(qInds, qTitles){
if(qInds[2] > qInds[1]){
firstCol <- qTitles[qInds[1]] %>%
str_split(" - ") %>%
unlist() %>%
tail(n = 1)
secondCol <- qTitles[qInds[2]] %>%
str_split(" - ") %>%
unlist() %>%
tail(n = 1)
if(firstCol == "X" && secondCol == "Y"){
return(TRUE)
} else{
return(FALSE)
}
} else{
return(FALSE)
}
}
res <- parseQuestions("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/parseQuestions.R', echo=TRUE)
?read.csv
hey <- function(){
return(list(1,2))
}
one, two <- hey()
classifiedInds <- classifyQuestions(qData, qTitles, qInds)
#'Group question data columns into single questions and classify as discrete or continuous
#'
#'@param inputFile: string containing path to spryng output file in csv
parseCollection <- function(inputFile, outlineFile = NULL){
if(!getWritePermission()){
cat("Exiting...\n")
}else{
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qData <- rawData[15:(length(rawData) - 1)]
qTitles <- names(qData)[1:(length(names(qData)))]
qInds <- getQIndices(qTitles, qData)
classifiedInds <- classifyQuestions(qData, qTitles, qInds)
contInds <- classifiedInds[[1]]
print(contInds)
discInds <- classifiedInds[[2]]
print(discInds)
}
}
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/parseCollection.R', echo=TRUE)
parseCollection("Data/employee_experiences_12Nov2019.csv")
