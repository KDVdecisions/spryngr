parseCollection("Data/employee_experiences_12Nov2019.csv")
addLevelsField <- function(outline, qData, qTitles){
for(i in 1:NROW(outline)){
#current question
thisQ <- outline[i,]
#starting column index of current question
thisInd <- unlist(thisQ$COL_IND)
if(thisQ$CLASS == "discrete"){
firstCol <- qData[,thisInd[1]]
#if data is in dummy column format
if(is.integer(firstCol)){
#obtain possible levels from headers
levels <- sapply(qTitles[thisInd[1]:thisInd[2]], function(x){
str_split(x, " - ") %>%
unlist() %>%
tail(n = 1) %>%
trimws(which=c("both"))
})
print(paste(levels, collapse = ", "))
hasOtherColumn(thisInd, qTitles)
} else if(is.character(firstCol)){
#print("Char")
#print(levels(as.factor(firstCol)))
hasOtherColumn(thisInd, qTitles)
} else{
print("Something unexpected happened")
}
} else{
#enter NA,
}
}
}
hasOtherColumn <- function(qInd, qTitles){
labels <- sapply(qTitles[qInd[1]:qInd[2]], function(x){
str_split(x, " - ") %>%
unlist() %>%
tail(n = 1) %>%
trimws(which=c("both"))
})
print(labels)
if("other" %in% labels){
print("Has other")
print(qInd)
return(TRUE)
} else{
return(FALSE)
}
}
parseCollection("Data/employee_experiences_12Nov2019.csv")
parseCollection("Data/testLibraryData.csv")
hasOtherColumn <- function(qInd, qTitles){
labels <- sapply(qTitles[qInd[1]:qInd[2]], function(x){
str_split(x, " - ") %>%
unlist() %>%
tail(n = 1) %>%
trimws(which=c("both"))
})
if("other" %in% labels){
return(TRUE)
} else{
return(FALSE)
}
}
getLabels <- function(qInd, qTitles){
labels <- sapply(qTitles[qInd[1]:qInd[2]], function(x){
str_split(x, " - ") %>%
unlist() %>%
tail(n = 1) %>%
trimws(which=c("both"))
})
return(labels)
}
addLevelsField <- function(outline, qData, qTitles){
for(i in 1:NROW(outline)){
#current question
thisQ <- outline[i,]
#starting column index of current question
thisInd <- unlist(thisQ$COL_IND)
if(thisQ$CLASS == "discrete"){
firstCol <- qData[,thisInd[1]]
#if data is in dummy column format
if(is.integer(firstCol)){
#obtain possible levels from headers
levels <- getLabels(thisInd, qTitles)
# levels <- sapply(qTitles[thisInd[1]:thisInd[2]], function(x){
#   str_split(x, " - ") %>%
#     unlist() %>%
#     tail(n = 1) %>%
#     trimws(which=c("both"))
# })
print(paste(levels, collapse = ", "))
hasOtherColumn(thisInd, qTitles)
} else if(is.character(firstCol)){
#print("Char")
#print(levels(as.factor(firstCol)))
hasOtherColumn(thisInd, qTitles)
} else{
print("Something unexpected happened")
}
} else{
#enter NA,
}
}
}
parseCollection("Data/testLibraryData.csv")
hey <- function(){
return(list(1,2))
}
parseCollection("Data/employee_experiences_12Nov2019.csv")
isTernary <- function(qInd, qTitles){
#get number of columns
nCols <- qInd[2] - qInd[1]
#if question has 5-6 columns
if(nCols >= 5 && nCols < 7){
#get column ending labels
colLabels <- getLabels(qInd, qTitles)
# colLabels <- sapply(qTitles[qInd[1]:qInd[2]], function(x){
#   str_split(x, " - ") %>%
#     unlist() %>%
#     tail(n = 1) %>%
#     trimws(which = c("both"))
# })
#if 4th element is X and 5th element is Y return true
if(colLabels[4] == "X" && colLabels[5] == "Y"){
return(TRUE)
} else{
return(FALSE)
}
} else{
return(FALSE)
}
}
buildOutline <- function(qData, qInds, qTitles){
# qIndsChar <- sapply(qInds, function(x){
#   return(paste(x, collapse = ", "))
# })
outline = data.frame(QUESTION = (1:length(qInds)),
CLASS = classifyQuestions(qData, qInds, qTitles))
outline$COL_IND <- qInds
print(outline)
addLevelsField(outline, qData, qTitles)
#addLevelsField(outline, qData, qTitles)
#return(outline)
}
parseCollection("Data/employee_experiences_12Nov2019.csv")
isTernary <- function(qInd, qTitles){
#get number of columns
nCols <- qInd[2] - qInd[1]
#if question has 5-6 columns
if(nCols >= 5 && nCols < 7){
#get column ending labels
colLabels <- getLabels(qInd, qTitles)
colLabels1 <- sapply(qTitles[qInd[1]:qInd[2]], function(x){
str_split(x, " - ") %>%
unlist() %>%
tail(n = 1) %>%
trimws(which = c("both"))
})
print(colLabels == colLabels1)
#if 4th element is X and 5th element is Y return true
if(colLabels[4] == "X" && colLabels[5] == "Y"){
return(TRUE)
} else{
return(FALSE)
}
} else{
return(FALSE)
}
}
parseCollection("Data/employee_experiences_12Nov2019.csv")
isTernary <- function(qInd, qTitles){
#get number of columns
nCols <- qInd[2] - qInd[1]
#if question has 5-6 columns
if(nCols >= 5 && nCols < 7){
#get column ending labels
colLabels <- getLabels(qInd, qTitles)
#if 4th element is X and 5th element is Y return true
if(colLabels[4] == "X" && colLabels[5] == "Y"){
return(TRUE)
} else{
return(FALSE)
}
} else{
return(FALSE)
}
}
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
addLevelsField <- function(outline, qData, qTitles){
levelsField <- c()
for(i in 1:NROW(outline)){
#current question
thisQ <- outline[i,]
#starting column index of current question
thisInd <- unlist(thisQ$COL_IND)
#if question is an MCQ/Demographic
if(thisQ$CLASS == "discrete"){
#get first column of data
firstCol <- qData[,thisInd[1]]
#obtain all labels for data columns
labels <- getLabels(thisInd, qTitles)
#if data is in dummy column format
if(is.integer(firstCol)){
#obtain possible levels from headers
levels <- labels %>%
paste(collapse = ", ")
} else if(is.character(firstCol)){
levels <- as.factor(firstCol) %>%
levels()
if("other" %in% labels){
levels <- c(levels, "other")
}
levels <- paste(levels, collapse = ", ")
} else{
print("Something unexpected happened")
}
} else{
levels <- NA
}
levelsField <- c(levelsField, levels)
}
}
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
parseCollection("Data/employee_experiences_12Nov2019.csv")
?sapply
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
parseCollection("Data/employee_experiences_12Nov2019.csv")
parseCollection("Data/employee_experiences_12Nov2019.csv")
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
View(outline)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
moreStr <- c("X", "Y", "NA")
moreStr[moreStr == "NA"] <- NULL
moreStr <- moreStr[moreStr != "NA"]
moreStr
moreStr <- c("X", "Y", "NA", "Some other string")
moreStr <- moreStr[moreStr != "NA"]
moreStr
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
moreStr <- c("X", "Y", "Some other string")
moreStr <- moreStr[moreStr != "NA"]
moreStr
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
addLevelsField <- function(outline, qData, qTitles){
LEVELS <- c()
for(i in 1:NROW(outline)){
#current question
thisQ <- outline[i,]
#starting column index of current question
thisInd <- unlist(thisQ$COL_IND)
#if question is an MCQ/Demographic
if(thisQ$CLASS == "discrete"){
#get first column of data
firstCol <- qData[,thisInd[1]]
#obtain all labels for data columns
labels <- getLabels(thisInd, qTitles)
#if data is in dummy column format
if(is.integer(firstCol)){
#obtain possible levels from headers
#thisLevels <- labels %>%
paste(collapse = ", ")
} else if(is.character(firstCol)){
thisLevels <- as.factor(firstCol) %>%
levels()
if("other" %in% labels){
thisLevels <- c(thisLevels, "other")
}
#thisLevels <- paste(thisLevels, collapse = ", ")
} else{
print("Something unexpected happened")
}
} else{
#drop NA from levels if it exists
thisLevels <- thisLeves[thisLevels != "NA"]
thisLevels <- NA
}
LEVELS <- c(LEVELS, thisLevels)
}
outline$LEVELS <- LEVELS
return(outline)
}
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
hey <- list()
hey <- append(hey, c(1,2,3))
hey
?append
hey <- list()
hey[[1]] <- c(1,2,3)
hey
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
View(outline)
hey <- 1
if(hey == 1 || hey == 2){
print('heynow')
}
hey <- 2
if(hey == 1 || hey == 2){
print('heynow')
}
hey <- 3
if(hey == 1 || hey == 2){
print('heynow')
}
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
View(outline)
hey <- c(1,2,3,4)
which(hey, 3)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
?which
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
getElement <- function(data, index){
return(data[index])
}
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
hey <- c("my work", "my work", "peers", "peers", "manager", "managers")
unique(hey)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
addLevelsField <- function(outline, qData, qTitles){
LEVELS <- list()
for(i in 1:NROW(outline)){
#current question
thisQ <- outline[i,]
#starting column index of current question
thisInd <- unlist(thisQ$COL_IND)
#if question is an MCQ/Demographic
if(thisQ$CLASS == "discrete" || thisQ$CLASS == "marble"){
#get first column of data
firstCol <- qData[,thisInd[1]]
#obtain all labels for data columns
labels <- getLabels(thisInd, qTitles)
#if data is in dummy column format
if(is.numeric(firstCol)){
#obtain possible levels from headers
if(thisQ$CLASS == "marble"){
thisLevels <- getMarbleLabels(thisInd, qTitles)
} else{
thisLevels <- labels
}
} else if(is.character(firstCol)){
thisLevels <- as.factor(firstCol) %>%
levels()
if("other" %in% labels){
thisLevels <- c(thisLevels, "other")
}
#thisLevels <- paste(thisLevels, collapse = ", ")
} else{
print("Something unexpected happened")
}
} else{
thisLevels <- NA
}
#drop NA from levels if it exists
thisLevels <- thisLevels[thisLevels != "NA"]
LEVELS[[i]] <- thisLevels
}
outline$LEVELS <- LEVELS
return(outline)
}
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
View(outline)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
View(outline)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
thisQ <- outline[i,]
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
hey <- c("my work", "my work", "peers", "peers", "manager", "managers")
c(hey, NA)
hey <- c(0,0,0,0)
c(hey, NA)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
View(outline)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
outline <- parseCollection("Data/employee_experiences_12Nov2019.csv")
outline <- parseCollection("Data/testLibraryData.csv")
View(outline)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/classifyQuestions.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/parseCollection.R', echo=TRUE)
outline <- parseCollection("Data/testLibraryData.csv")
library(dplyr)
library(stringr)
library(ggplot2)
library(xlsx)
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/scratch")
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/parseCollection.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/classifyQuestions.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/writeCollectionData.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/getUserInput.R', echo=TRUE)
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R')
outline <- parseCollection("Data/testLibraryData.csv")
View(outline)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/parseCollection.R')
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/classifyQuestions.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/writeCollectionData.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/getUserInput.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/parseCollection.R', echo=TRUE)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildOutline.R', echo=TRUE)
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/scratch")
library(dplyr)
library(stringr)
library(ggplot2)
library(xlsx)
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/helperFunctions.R', echo=TRUE)
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
outline <- parseCollection("Data/testLibraryData.csv")
View(outline)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/parseCollection.R')
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
outline <- parseCollection("Data/testLibraryData.csv")
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
outline <- parseCollection("Data/testLibraryData.csv")
View(outline)
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
source('C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr/R/buildContinuous.R')
