pathFile <- paste0(outputFolder, "/", "Data_Path.txt")
visualizationFolder <- paste0(outputFolder, "/", "Visualizations")
displayInfo <- TRUE
#read in data
rawData <- read.csv(readLines(pathFile), check.names = FALSE)
answers <- rawData[,15:length(rawData)]
setClass("Question", representation(type="character", title="character", labels="character", data="data.frame"))
qTypes <- c("Marble","Slider","MCQ","Triangle","FreeText")
qObjects <- list()
#Establish what question types are in label file
sheetNames <- loadWorkbook(labelFile) %>%
getSheets() %>%
names()
qTypes <- intersect(sheetNames,qTypes)
#Read label file in and instantiate question objects
for(type in qTypes){
qCategory <- read.xlsx(labelFile, sheetName = type)
for(i in 1:NROW(qCategory)){
thisQuestion <- qCategory[i,]
labels <- strsplit(thisQuestion$labels," _ ") %>%
unlist() %>%
trimws()
title <- labels[1]
labels <- labels[2:length(labels)]
thisQOb <- new("Question", type=type, labels=labels, title=title,
data=data.frame(answers[thisQuestion$startColIndex:thisQuestion$endColIndex],
check.names=FALSE, fix.empty.names=FALSE))
qObjects[[type]] <- append(qObjects[[type]], thisQOb)
}
}
for(i in 1:length(qObjects$MCQ)){
print(i)
if(isCheckboxMcq(qObjects$MCQ[[i]])){
print(i)
qObjects$MCQ[[i]]<- collapseMcq(qObjects$MCQ[[i]])
}
}
return(qObjects)
}
obs <- getQuestionObjects("employee_experiences_12Nov2019_output")
getQuestionObjects <- function(outputFolder, displayInfo){
labelFile <- paste0(outputFolder, "/", "Question_Labels.xlsx")
pathFile <- paste0(outputFolder, "/", "Data_Path.txt")
visualizationFolder <- paste0(outputFolder, "/", "Visualizations")
displayInfo <- TRUE
#read in data
rawData <- read.csv(readLines(pathFile), check.names = FALSE)
answers <- rawData[,15:length(rawData)]
setClass("Question", representation(type="character", title="character", labels="character", data="data.frame"))
qTypes <- c("Marble","Slider","MCQ","Triangle","FreeText")
qObjects <- list()
#Establish what question types are in label file
sheetNames <- loadWorkbook(labelFile) %>%
getSheets() %>%
names()
qTypes <- intersect(sheetNames,qTypes)
#Read label file in and instantiate question objects
for(type in qTypes){
qCategory <- read.xlsx(labelFile, sheetName = type)
for(i in 1:NROW(qCategory)){
thisQuestion <- qCategory[i,]
labels <- strsplit(thisQuestion$labels," _ ") %>%
unlist() %>%
trimws()
title <- labels[1]
labels <- labels[2:length(labels)]
thisQOb <- new("Question", type=type, labels=labels, title=title,
data=data.frame(answers[thisQuestion$startColIndex:thisQuestion$endColIndex],
check.names=FALSE, fix.empty.names=FALSE))
qObjects[[type]] <- append(qObjects[[type]], thisQOb)
}
}
for(i in 1:length(qObjects$MCQ)){
print(i)
if(isCheckboxMcq(qObjects$MCQ[[i]])){
print(i)
qObjects$MCQ[[i]]<- collapseMcq(qObjects$MCQ[[i]])
}
}
return(qObjects)
}
obs <- getQuestionObjects("employee_experiences_12Nov2019_output")
identifyQuestions <- function(inputFile, threshold=65){
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qInds <- list()
curInd <- c(1)
j = 1
answers <- rawData[15:length(rawData)]
questions <- names(answers)[1:(length(names(answers))-1)]
#' iterates through and creates list that holds the beginning and end index of each question
for(i in 2:length(questions)){
curQ <- questions[i-1] %>%
strsplit(" - ")
curQ <- unlist(curQ)[1]
nextQ <- questions[i] %>%
strsplit(" - ")
nextQ <- unlist(nextQ)[1]
similarity <- compareChars(curQ,nextQ)
if(similarity < threshold){   #if next string isn't part of current question
curInd <- c(curInd, i-1)
qInds[[j]] <- curInd
curInd <- c(i)
j=j+1
}
if(i == length(questions)){ #if on final iteration
curInd <- c(curInd, i)
qInds[[j]] <- curInd
if(similarity < threshold){  #if last question is on its own
qInds[[j]] <- c(i,i)
}
}
}
qClasses <- classifyQuestions(questions, answers, qInds)
if("Marble" %in% qClasses){
qInds <- gatherMarbles(qInds, qClasses, questions)
qClasses <- classifyQuestions(questions,answers, qInds)
}
qClassesDf <- data.frame(startColIndex = sapply(qInds, function(x) return(x[1])),
endColIndex = sapply(qInds, function(x) return(x[2])),
qClass = unlist(qClasses)
)
#Convert NA columns to logical
for(i in 1:NROW(qClassesDf)){
lastCol <- unlist(strsplit(questions[qClassesDf[i,]$endColIndex],"-")) %>%
str_remove_all(" ")
if(lastCol[length(lastCol)] == "NA"){
answers[qClassesDf[i,]$endColIndex] <- sapply(answers[qClassesDf[i,]$endColIndex], function(x){
sapply(x, function(x){
if(is.na(x)){
return(0)
}else{
return(1)
}
})
})
}
}
generateOutput(inputFile, qClassesDf, questions, answers)
}#identify questions
identifyQuestions("employee_experiences_12Nov2019.csv")
library(dplyr)
library(stringr)
#library(tools)
library(xlsx)
source("R/identifyQuestions_Source.R")
identifyQuestions <- function(inputFile, threshold=65){
rawData <- read.csv(inputFile, check.names=F, na.strings = c("NA",""))
qInds <- list()
curInd <- c(1)
j = 1
answers <- rawData[15:length(rawData)]
questions <- names(answers)[1:(length(names(answers))-1)]
#' iterates through and creates list that holds the beginning and end index of each question
for(i in 2:length(questions)){
curQ <- questions[i-1] %>%
strsplit(" - ")
curQ <- unlist(curQ)[1]
nextQ <- questions[i] %>%
strsplit(" - ")
nextQ <- unlist(nextQ)[1]
similarity <- compareChars(curQ,nextQ)
if(similarity < threshold){   #if next string isn't part of current question
curInd <- c(curInd, i-1)
qInds[[j]] <- curInd
curInd <- c(i)
j=j+1
}
if(i == length(questions)){ #if on final iteration
curInd <- c(curInd, i)
qInds[[j]] <- curInd
if(similarity < threshold){  #if last question is on its own
qInds[[j]] <- c(i,i)
}
}
}
qClasses <- classifyQuestions(questions, answers, qInds)
if("Marble" %in% qClasses){
qInds <- gatherMarbles(qInds, qClasses, questions)
qClasses <- classifyQuestions(questions,answers, qInds)
}
qClassesDf <- data.frame(startColIndex = sapply(qInds, function(x) return(x[1])),
endColIndex = sapply(qInds, function(x) return(x[2])),
qClass = unlist(qClasses)
)
#Convert NA columns to logical
for(i in 1:NROW(qClassesDf)){
lastCol <- unlist(strsplit(questions[qClassesDf[i,]$endColIndex],"-")) %>%
str_remove_all(" ")
if(lastCol[length(lastCol)] == "NA"){
answers[qClassesDf[i,]$endColIndex] <- sapply(answers[qClassesDf[i,]$endColIndex], function(x){
sapply(x, function(x){
if(is.na(x)){
return(0)
}else{
return(1)
}
})
})
}
}
generateOutput(inputFile, qClassesDf, questions, answers)
}#identify questions
generateOutput <- function(inputFile, qClassesDf, questions, answers){
#Isolate input file name
inputName <- strsplit(inputFile, "/") %>%
unlist()
inputName <- inputName[length(inputName)] %>%
strsplit("[.]")
inputName <- unlist(inputName)[1]
outputName <- paste0(inputName,"_output")
if(file.exists(outputName)){
warning("An output folder with this filename already exists")
return()
}else{
dir.create(outputName)
#create viz directory
dir.create(paste0(outputName, "/", "Visualizations"))
#Write textfile containing path to relevant input file
writeLines(file_path_as_absolute(inputFile), paste0(outputName,"/","Data_Path.txt"))
#generate label file
generateLabelFile(outputName, qClassesDf, questions, answers)
# write.xlsx(file_path_as_absolute(inputFile),"spryng_labels.xlsx", sheetName="Path",
#            col.names=FALSE, row.names=FALSE, append=TRUE)
}
}
generateLabelFile <- function(outputName, qClassesDf, questions, answers){
qTypes <- c("Marble","Slider","MCQ","Triangle","FreeText")
qName <- getQNames(qClassesDf, questions)
indices <- cbind(qClassesDf,qName)
labelFile <- paste0(outputName,"/", "Question_Labels.xlsx")
#write out indices sheet
write.xlsx(indices, labelFile, sheetName="Indices",
row.names=FALSE)
#'Iterate over each label, unlist group of labels, trim whitespace,
#'encase individual labels in single quotes,
#'Concattenate each vector of labels to single string,
#'write each of these strings out to xlsx file
#'
for(qType in qTypes){
thisType <- qClassesDf[qClassesDf$qClass == qType,]
if(NROW(thisType) > 0){
#returns all labels for the questions of this type
labels <- generateLabels(thisType, questions, answers)
#iterates over groups of labels for each question
labels <- sapply(labels, function(i){
label <- unlist(i) %>%
trimws() %>%
paste(collapse=" _ ")
#paste(thisQLabels, collapse=", ")
})
thisType$labels <- labels
write.xlsx(thisType, labelFile,sheetName=qType,
row.names=FALSE, append=TRUE)
}
}
}
identifyQuestions("employee_experiences_12Nov2019.csv")
identifyQuestions("employee_experiences_12Nov2019.csv")
library(tools)
identifyQuestions("employee_experiences_12Nov2019.csv")
identifyQuestions("employee_experiences_12Nov2019.csv")
devtools::load_all()
devtools::load_all()
devtools::install("spryngr")
setwd("C:\Users\Eliot\Desktop\Documents\KDV_Decisions\P_Spryng_Data\Code")
source("generateVisuals_Source")
devtools::load_all()
devtools::load_all()
source("R/generateVisuals_Source")
getwd()
source("R/generateVisuals_Source")
source("R/generateVisuals_Source.R")
source("R/generateVisuals_Source")
source("R/generateVisuals_Source.R")
#'Generates question objects from label file and raw data
#' @param outputFolder: String containing path to folder generated from call to identifyQuestions
#' @export
getQuestionObjects <- function(outputFolder){
labelFile <- paste0(outputFolder, "/", "Question_Labels.xlsx")
pathFile <- paste0(outputFolder, "/", "Data_Path.txt")
visualizationFolder <- paste0(outputFolder, "/", "Visualizations")
#TODO: displayInfo
displayInfo <- TRUE
#read in data
rawData <- read.csv(readLines(pathFile), check.names = FALSE)
answers <- rawData[,15:length(rawData)]
setClass("Question", representation(type="character", title="character", labels="character", data="data.frame"))
qTypes <- c("Marble","Slider","MCQ","Triangle","FreeText")
qObjects <- list()
#Establish what question types are in label file
sheetNames <- loadWorkbook(labelFile) %>%
getSheets() %>%
names()
qTypes <- intersect(sheetNames,qTypes)
#Read label file in and instantiate question objects
for(type in qTypes){
qCategory <- read.xlsx(labelFile, sheetName = type)
for(i in 1:NROW(qCategory)){
thisQuestion <- qCategory[i,]
labels <- strsplit(thisQuestion$labels," _ ") %>%
unlist() %>%
trimws()
title <- labels[1]
labels <- labels[2:length(labels)]
thisQOb <- new("Question", type=type, labels=labels, title=title,
data=data.frame(answers[thisQuestion$startColIndex:thisQuestion$endColIndex],
check.names=FALSE, fix.empty.names=FALSE))
qObjects[[type]] <- append(qObjects[[type]], thisQOb)
}
}
for(i in 1:length(qObjects$MCQ)){
if(isCheckboxMcq(qObjects$MCQ[[i]])){
qObjects$MCQ[[i]]<- collapseMcq(qObjects$MCQ[[i]])
}
}
return(qObjects)
}
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools
devtools::load_all()
devtools::load_all()
spryngr::classifyQuestions("employee_experiences_12Nov2019.csv")
spryngr::identifyQuestions("employee_experiences_12Nov2019.csv")
library(dplyr)
library(xlsx)
library(ggplot2)
library(tools)
library(stringr)
spryngr::identifyQuestions("employee_experiences_12Nov2019.csv")
qObjects <- spryngr::getQuestionObjects(employee_experiences_12Nov2019_output)
qObjects <- spryngr::getQuestionObjects("employee_experiences_12Nov2019_output")
qObjects <- spryngr::getQuestionObjects("employee_experiences_12Nov2019_output")
qObjects$Marble
spryngr::plotAllDyads(qObjects$Marble, qObjects$MCQ)
library(dplyr)
library(xlsx)
library(ggplot2)
library(tools)
library(stringr)
spryngr::identifyQuestions("employee_experiences_12Nov2019.csv")
devtools::load_all()
getwd()
library(dplyr)
library(xlsx)
library(ggplot2)
library(tools)
library(stringr)
devtools::load_all()
spryngr::identifyQuestions("employee_experiences_12Nov2019.csv")
spryngr::identifyQuestions("employee_experiences_12Nov2019.csv")
qObjects <- spryngr::getQuestionObjects("employee_experiences_12Nov2019_output")
spryngr::plotAllDyads(qObjects$Marble, qObjects$MCQ)
spryngr::plotAllMarbles(qObjects$Marble, qObjects$MCQ[1])
spryngr::plotAllTernaries(qObjects$Triangle[1], qObjects$MCQ[1])
spryngr::plotDyad(qObjects$marble[[1]], qObjects$MCQ[[1]])
spryngr::plotDyad(qObjects$Slider[[1]],qObjects$MCQ[[1]])
spryngr::plotDyad(qObjects$Slider[[1]],qObjects$MCQ[[1]])
?spryngr::plotTernary
spryngr::plotTernary(qObjects$Triangle[[1]], qObjects$MCQ[[1]], varIndex=1)
spryngr::plotMarble(qObjects$Marble[[1]], qObjects$MCQ[[2]], varIndex=1, axis=1)
library(dplyr)
library(xlsx)
library(ggplot2)
library(tools)
library(stringr)
devtools::load_all()
#generates label file in working directory
spryngr::identifyQuestions("risk_decisions_journaling_final.csv")
#generates Question objects
qObjects <- spryngr::getQuestionObjects("employee_experiences_12Nov2019_output")
spryngr::plotAllDyads(qObjects$Marble, qObjects$MCQ)
#helper function, converts NA columns within answers to logical type
naToLogical <- function(questions, answers){
for(i in 1:NROW(qClassesDf)){
lastCol <- unlist(strsplit(questions[qClassesDf[i,]$endColIndex]," - ")) %>%
str_remove_all(" ")
if(lastCol[length(lastCol)] == "NA"){
answers[qClassesDf[i,]$endColIndex] <- sapply(answers[qClassesDf[i,]$endColIndex], function(x){
sapply(x, function(x){
if(is.na(x)){
return(0)
}else{
return(1)
}
})
})
}
}
return(answers)
}
load_all()
library(devtools)
load_all()
library(dplyr)
library(xlsx)
library(ggplot2)
library(tools)
library(stringr)
devtools::load_all()
getwd()
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/")
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/")
spryngr::generateLabelFile("Data/risk_decisions_journaling_final.csv")
devtools::load_all()
devtools::load_all("~/Code/spryngr")
devtools::load_all("/Code/spryngr")
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
devtools::load_all("/Code/spryngr")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
spryngr::generateLabelFile("Data/risk_decisions_journaling_final.csv")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
spryngr::generateLabelFile("Data/risk_decisions_journaling_final.csv")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
spryngr::generateLabelFile("Data/risk_decisions_journaling_final.csv")
spryngr::generateLabelFile("Data/employee_experiences_12Nov2019.csv")
check()
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
check()
check()
use_mit_license()
use_mit_license("Eliot Dixon")
check()
session_info()
sessionInfo
sessionInfo()
session_info()
sessionInfo()
library(dplyr)
library(xlsx)
library(ggplot2)
library(tools)
library(stringr)
sessionInfo()
session_info()
??session_info()
library(devtools)
session_info()
library(devtools)
session_info()
library(tools)
session_info()
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/")
normalizePath("employee_experiences_12Nov2019_output/Question_Labels_new.xlsx")
library(xlsx)
normalizePath("data/employee_experiences_12Nov2019.csv")
read.csv(normalizePath("data/employee_experiences_12Nov2019.csv"))
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
spryngr::generateLabelFile("Data/employee_experiences_12Nov2019.csv")
library(dplyr)
library(xlsx)
library(ggplot2)
library(stringr)
library(dplyr)
library(xlsx)
library(ggplot2)
#library(tools)
library(stringr)
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
spryngr::generateLabelFile("Data/employee_experiences_12Nov2019.csv")
spryngr::generateLabelFile("Data/employee_experiences_12Nov2019.csv")
library(dplyr)
library(xlsx)
library(ggplot2)
library(stringr)
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
spryngr::generateLabelFile("Data/employee_experiences_12Nov2019.csv")
spryngr::generateLabelFile("Data/employee_experiences_12Nov2019.csv")
#generates Question objects
qObjects <- spryngr::getQuestionObjects("employee_experiences_12Nov2019_output")
names(qObjects)
names(qObjects) <- c("Marble", "Dyad", "MCQ", "Ternary")
qObjects
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
spryngr::generateLabelFile("Data/employee_experiences_12Nov2019.csv")
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
spryngr::generateLabelFile("Data/employee_experiences_12Nov2019.csv")
#generates Question objects
qObjects <- spryngr::getQuestionObjects("employee_experiences_12Nov2019_output")
names(qObjects)
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
devtools::document()
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
devtools::document()
devtools::document()
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/")
devtools::load_all("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
spryngr::generateLabelFile("Data/employee_experiences_12Nov2019.csv")
#generates Question objects
qObjects <- spryngr::generateQuestionObjects("employee_experiences_12Nov2019_output")
documnet()
document()
library(devtools)
getwd()
setwd(""C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr"")
setwd("C:/Users/Eliot/Desktop/Documents/KDV_Decisions/P_Spryng_Data/Code/spryngr")
document()
documnet()
document()
check()
install()
library(spryngr)
